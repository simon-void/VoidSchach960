optimizations:
-are type checks (e.g. is King) slower that isKing(), isQueen, ... calls?? If not remove those functions
-is isNotBound easier to compute than !isBound??
-get possibleMoves shouldn't iterate over every reachable move in case of checkLines or boundLines
-a StaticChessBoard with optimized and immutable data structure for StaticEvaluation
-is there an efficient way to compute if a pawn is a passed pawn?? (because there should be a passed-pawn bonus)
-CheckmateOther/Self's depth should be of type UInt
-BasicChessBoard.forAllFigures(OfColor) shouldn't iterate over all 64 fields (a board should have an array of white and one for black figures)


features:
- different chess engine implementations:
  - AWS lambda version of chess engine which computes each possible move in parallel (Step Functions)
  - Rust version
- make everything non-ui Kotlin-multiplatform
- new UI written in Flutter
- resizable interface (inclusive full-screen)